---
date: 2025-01-03
description: Expect the role of machine learning in your system to change, as the system matures
title: Keep knowing why ML (Timeless ML Principles 2)
categories:
  - TMLP
  - ML
  - frogs
---

This is the second post in a series about the ways that machine learning (ML) has not changed. (The first post is [here](../2024-12-11-ml-principles/index.qmd).) Not that it is the same in every way, but that key principles from classical ML are still important today. This one is a bit of a koan: the thing that has not changed is that you should expect change, understanding it in terms of ML's purpose in your system.

[![A tadpole considers its existence (photo CC-ND the1pony "Oh Hai!")](tadpole1.jpg){fig-alt="A tadpole with hints of legs stares into the camera" width="512"}](https://www.flickr.com/photos/the1pony/3728761118/in/album-72157621478400640)

## Know why ML is involved

When developing a product feature based on machine learning, it's important to remember that it is a product feature first, then a software system that provides that feature, and finally an ML-based system. The primary goal---its reason for existence---is that it is doing something useful for your end users, in the socio-technical context of everything else your users are using, understanding, and doing. Some software system is necessary to deliver that feature, but it might not be necessary to use any ML model at all, especially in the larval stages of exploratory user research and system prototyping, or in baseline systems used for software testing, system evaluation, and data development. If models are necessary, they are just parts in that software system body, and it might not be the same class of model as you would use at a different stage for another purpose.

[![A tadpole prototyping some legs (photo CC-ND the1pony "Legs. I has them.")](tadpole2.jpg){fig-alt="A tadpole with little legs dangling" width="512"}](https://www.flickr.com/photos/the1pony/3727958415/in/album-72157621478400640)

## A system has many parts, and each part has its function

A function that you believe will need a big model or a custom model might be better satisfied by deterministic rules, a random function, or a much simpler model, while you are focusing development on the overall software system, including metrics that can guide you towards solving your users' real needs. On the other hand, you might want to use a very large custom model or a complicated pipeline in a slow offline system that you use as a silver labeler in data development, as a teacher model for a smaller faster production model, or as a foil in system evaluation and error analysis. So think carefully about why you need ML in the system, and for each ML role in the system, consider what trade-offs are preferred among quality, latency, reliability, usability, etc.

[![Tadpole with compatible legs and tail (photo CC-ND the1pony "Smiling for the camera")](tadpole3.jpg){width="512"}](https://www.flickr.com/photos/the1pony/3744076062/in/album-72157621478400640)

## Don't let the tail wag the frog

A system with ML components requires additional considerations, beyond a deterministic system, but not instead of those. The non-deterministic components need their own evaluations, and the system as a whole needs end-to-end evaluation based on statistical design, beyond the end-to-end testing of logic and data formats. And resource planning and load testing will need to be tailored to the constraints of ML systems. But that is all on top of a foundation of good software development. Early exploratory user research and technical feasibility studies feed into careful designs, deterministic components are developed iteratively with classical testing, and feedback from software profiling, usability tests, and trials guide revisions to the system. But these adjustments to the architecture and development processes are for the sake of the product, for the users' sake, not for the sake of machine learning as a goal, nor especially a particular class of model as a goal.

[![Frog with a legacy tail (photo CC-ND the1pony "Frog on water hyacinth: this guy still has a small tail")](tadpole4.jpg){fig-alt="Frog with a stub of a tail, resting on a hyacinth" width="512"}](https://www.flickr.com/photos/the1pony/3776694971/in/album-72157621478400640)

## The only constant is change

As development progresses, the system will mature while your own understanding of the problem space matures, and your data development efforts expand and enrich your datasets. Besides the planned upgrades to models that have better quality/latency/cost profiles, you may well find that initial prototypes were focused on the wrong problem, or that you need to replace pipelines with end-to-end models for quality reasons, or replace end-to-end models with pipelines for the sake of reliabilty, speed or cost. You'll need to find ways to adjust assumptions while allowing contrastive evaluations and error analysis.

[![An adult frog prepares for new changes (photo CC-ND the1pony "frog")](frog.jpg){fig-alt="Frog rests under a hyacinth leaf" width="512"}](https://www.flickr.com/photos/the1pony/3783106696/in/album-72157621478400640)